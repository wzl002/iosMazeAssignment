
precision mediump float;

uniform sampler2D u_Texture;

uniform vec4 u_LightingParameters;
uniform vec4 u_MaterialParameters;
uniform float u_transparency;

uniform bool u_flashLightOn;

varying vec3 v_ViewPosition;
varying vec3 v_ViewNormal;
varying vec2 v_TextureCoord;
varying float v_ViewPointDistance;
// Light
uniform lowp vec4 u_nglLightColor;

uniform mediump float u_nglShininess;

varying highp vec3 v_nglVEye;
varying highp vec4 v_nglVEyeD;
varying highp vec3 v_nglNormalDirection;
varying highp vec3 v_nglLightDirection;
varying lowp float v_nglLightLevel;

// Fog input
uniform bool u_nglfogOn;
uniform lowp float u_nglFogEnd;
uniform lowp float u_nglFogFactor;
uniform lowp float u_nglfogIntensityHandle;
uniform lowp vec4 u_nglFogColor;

lowp float v_nglFog;

// local variables
lowp vec4 _nglEmission = vec4(0.0);
lowp vec4 _nglSpotLight = vec4(0.0);
lowp vec4 _nglAmbient = vec4(0.2);
lowp vec4 _nglDiffuse = vec4(1.0);
lowp vec4 _nglSpecular = vec4(0.0);
lowp float _nglShineF = 1.0;
lowp float _nglAlpha = 1.0;

void main() {
    
    // if not obj model
    if(1 == 1){
        // vec4 objectColor  = texture2D(u_Texture, v_TextureCoord);
        vec4 objectColor = texture2D(u_Texture, vec2(v_TextureCoord.x, 1.0 - v_TextureCoord.y)); // invert texture
        lowp vec3 _nglViewEyeDirection = normalize(v_nglVEye);
        lowp vec3 _nglLightDirection = normalize(v_nglLightDirection);
        lowp vec3 viewNormal = normalize(v_ViewNormal);

        //    Emissive
        
        // _nglDiffuse = vec4(0.5, 0.5, 0.7, 1.0); // instead of texture if no texture

        // Phong : Ambient, Diffuse, Specular
        // Ambient
        _nglAmbient *= u_nglLightColor * v_nglLightLevel;

        // Diffuse
        lowp float _nglLightD = clamp(dot(viewNormal, _nglLightDirection), 0.0, 1.0); // 0.2: back face also has light
        _nglDiffuse = u_nglLightColor * v_nglLightLevel * _nglLightD;

        //    Specular
        float specularPower = 16.0, specularStrength = 0.4;
        vec3 reflectedLightDirection = reflect(-_nglLightDirection, viewNormal);
        float specular = clamp( dot( _nglViewEyeDirection, reflectedLightDirection), 0.0, 1.0);
        _nglSpecular = u_nglLightColor * v_nglLightLevel * specularStrength * pow(specular, specularPower);

        //    Shininess
        // lowp float _nglShineD = max(dot(2.0 * viewNormal * _nglLightD - _nglLightDirection, _nglViewEyeDirection), 0.0);

        // flashLight
        if(u_flashLightOn){
            float spotSpecularPower = 12.0, spotSpecularStrength = 0.8;
            vec3 spotLightDirection = normalize(v_nglVEyeD.xyz);
            float spotDot = dot ( -_nglViewEyeDirection, spotLightDirection);
            float spotCosCutoff = 0.95; // size, 0.8 - 1.0
            if(spotDot > spotCosCutoff){
                float spotSpecular = clamp( dot( -_nglViewEyeDirection, reflect(-spotLightDirection, viewNormal)), 0.0, 1.0);
                _nglSpotLight  = u_nglLightColor * spotSpecularStrength * pow(spotDot, spotSpecularPower);
            }
        }

        gl_FragColor = _nglSpotLight + ( _nglDiffuse + _nglAmbient ) * objectColor + _nglSpecular;
        
        //    Alpha
        //  gl_FragColor.a = _nglAlpha * _nglDiffuse.a;

        //    Fog
        if(u_nglfogOn){
            v_nglFog = clamp((u_nglFogEnd - v_ViewPointDistance) / u_nglFogFactor, 0.1, 1.0) * u_nglfogIntensityHandle;
            gl_FragColor = mix(u_nglFogColor, gl_FragColor, v_nglFog);
        }
        
        
    } else { // obj mode
        // We support approximate sRGB gamma.
//        const float kGamma = 0.4545454;
//        const float kInverseGamma = 2.2;
//
//        // Unpack lighting and material parameters for better naming.
//        vec3 viewLightDirection = u_LightingParameters.xyz;
//        float lightIntensity = u_LightingParameters.w;
//
//        float materialAmbient = u_MaterialParameters.x;
//        float materialDiffuse = u_MaterialParameters.y;
//        float materialSpecular = u_MaterialParameters.z;
//        float materialSpecularPower = u_MaterialParameters.w;
//
//        // Normalize varying parameters, because they are linearly interpolated in the vertex shader.
//        vec3 viewFragmentDirection = normalize(v_ViewPosition);
//        vec3 viewNormal = normalize(v_ViewNormal);
//
//        // Apply inverse SRGB gamma to the texture before making lighting calculations.
//        // Flip the y-texture coordinate to address the texture from top-left.
//        vec4 objectColor = texture2D(u_Texture, vec2(v_TextureCoord.x, 1.0 - v_TextureCoord.y));
//        objectColor.rgb = pow(objectColor.rgb, vec3(kInverseGamma));
//
//        // Ambient light is unaffected by the light intensity.
//        float ambient = materialAmbient;
//
//        // Approximate a hemisphere light (not a harsh directional light).
//        float diffuse = lightIntensity * materialDiffuse * 0.5 * (dot(viewNormal, viewLightDirection) + 1.0);
//
//        // Compute specular light.
//        vec3 reflectedLightDirection = reflect(viewLightDirection, viewNormal);
//        float specularStrength = max(0.0, dot(viewFragmentDirection, reflectedLightDirection));
//        float specular = lightIntensity * materialSpecular * pow(specularStrength, materialSpecularPower);
//
//        // Apply SRGB gamma before writing the fragment color.
//        gl_FragColor.a = u_transparency;
//        gl_FragColor.rgb = pow(objectColor.rgb * (ambient + diffuse) + specular, vec3(kGamma));
    }
}
