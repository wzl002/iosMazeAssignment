// camera position, direction
const lowp vec3 _cameraPosition = vec3(0.0, 0.0, 0.0);
const lowp vec3 _cameraLookAt = vec3(0.0, 0.0, -1.0);

// uniform
uniform mat4 u_ModelView;
uniform highp mat4 u_ModelViewProjection;
uniform highp mat4 u_NormalMatrix;
// attribute
attribute highp vec4 a_Position;
attribute vec3 a_Normal;
attribute vec2 a_Color;
attribute lowp vec2 a_TextureCoord;

// output
varying vec3 v_ViewPosition;
varying vec3 v_ViewNormal;
varying vec2 v_TextureCoord;
varying lowp float v_ViewPointDistance;

// Light input
uniform highp vec3 u_nglScale;
uniform highp mat4 u_nglMIMatrix;
uniform highp mat4 u_nglMVIMatrix;
uniform highp vec4 u_nglLightDirection;
uniform highp float u_nglLightAttenuation;

// Light output
varying highp vec3 v_ToView;
varying highp vec3 v_CameraDirection;
varying highp vec3 v_ToLightDirection;
varying lowp float v_nglLightLevel;



void main() {
    //    Base
    gl_Position = u_ModelViewProjection * a_Position;

    v_ViewNormal = normalize((u_NormalMatrix * vec4(a_Normal, 0.0)).xyz); //    Normals
    v_TextureCoord = a_TextureCoord; //    Maps

    v_ViewPointDistance = length(gl_Position);

    //  Camera
    v_ViewPosition = (u_ModelView * a_Position).xyz; // vertexPosition_cameraspace
    v_CameraDirection = _cameraLookAt.xyz;
    v_ToView = _cameraPosition.xyz - v_ViewPosition; // EyeDirection_cameraspace

    //  Env Light
    v_ToLightDirection = u_nglLightDirection.xyz - v_ViewPosition; // To Diffuse LightDirection_cameraspace
    v_nglLightLevel = clamp(u_nglLightAttenuation, 0.0, 1.0);


    // inside light source
    // v_nglVLight = (u_nglMIMatrix * u_nglLightPosition - gl_Position).xyz;
    // v_nglLightLevel = clamp(u_nglLightAttenuation / length(u_nglLightDirection), 0.0, 1.0);


}
